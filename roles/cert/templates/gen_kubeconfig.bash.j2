#!/usr/bin/bash

## 生成配置文件controller-manager.kubeconfig
kubectl config set-cluster kubernetes  \
     --certificate-authority=ca.pem  \
     --embed-certs=true  \
     --server=https://{{master_ip}}:6443  \
     --kubeconfig=controller-manager.kubeconfig

kubectl config set-context system:kube-controller-manager@kubernetes  \
    --cluster=kubernetes  \
    --user=system:kube-controller-manager  \
    --kubeconfig=controller-manager.kubeconfig

kubectl config set-credentials system:kube-controller-manager  \
    --client-certificate=controller-manager.pem  \
    --client-key=controller-manager-key.pem  \
    --embed-certs=true  \
    --kubeconfig=controller-manager.kubeconfig

kubectl config use-context system:kube-controller-manager@kubernetes  \
     --kubeconfig=controller-manager.kubeconfig


## 生成配置文件scheduler.kubeconfig
kubectl config set-cluster kubernetes  \
    --certificate-authority=ca.pem  \
    --embed-certs=true  \
    --server=https://{{master_ip}}:6443  \
    --kubeconfig=scheduler.kubeconfig

kubectl config set-credentials system:kube-scheduler  \
    --client-certificate=scheduler.pem  \
    --client-key=scheduler-key.pem  \
    --embed-certs=true  \
    --kubeconfig=scheduler.kubeconfig

kubectl config set-context system:kube-scheduler@kubernetes  \
    --cluster=kubernetes  \
    --user=system:kube-scheduler  \
    --kubeconfig=scheduler.kubeconfig

kubectl config use-context system:kube-scheduler@kubernetes  \
    --kubeconfig=scheduler.kubeconfig


## 生成配置文件admin.kubeconfig
kubectl config set-cluster kubernetes  \
    --certificate-authority=ca.pem  \
    --embed-certs=true  \
    --server=https://{{master_ip}}:6443  \
    --kubeconfig=admin.kubeconfig

kubectl config set-credentials kubernetes-admin  \
    --client-certificate=admin.pem  \
    --client-key=admin-key.pem  \
    --embed-certs=true  \
    --kubeconfig=admin.kubeconfig

kubectl config set-context kubernetes-admin@kubernetes  \
    --cluster=kubernetes  \
    --user=kubernetes-admin  \
    --kubeconfig=admin.kubeconfig

kubectl config use-context kubernetes-admin@kubernetes  \
    --kubeconfig=admin.kubeconfig


## 生成配置文件kube-proxy.kubeconfig
kubectl config set-cluster kubernetes  \
    --certificate-authority=ca.pem  \
    --embed-certs=true  \
    --server=https://{{master_ip}}:6443  \
    --kubeconfig=kube-proxy.kubeconfig

kubectl config set-credentials kube-proxy  \
    --client-certificate=kube-proxy.pem  \
    --client-key=kube-proxy-key.pem  \
    --embed-certs=true  \
    --kubeconfig=kube-proxy.kubeconfig

kubectl config set-context kube-proxy@kubernetes  \
    --cluster=kubernetes  \
    --user=kube-proxy  \
    --kubeconfig=kube-proxy.kubeconfig

kubectl config use-context kube-proxy@kubernetes  \
    --kubeconfig=kube-proxy.kubeconfig


## 生成配置文件bootstrap-kubelet.kubeconfig
kubectl config set-cluster kubernetes  \
    --certificate-authority=ca.pem  \
    --embed-certs=true  \
    --server=https://{{master_ip}}:6443     \
    --kubeconfig=bootstrap-kubelet.kubeconfig

kubectl config set-credentials tls-bootstrap-token-user  \
    --token={{bootstrap_token_id}}.{{bootstrap_token}}  \
    --kubeconfig=bootstrap-kubelet.kubeconfig

kubectl config set-context tls-bootstrap-token-user@kubernetes  \
    --cluster=kubernetes  \
    --user=tls-bootstrap-token-user  \
    --kubeconfig=bootstrap-kubelet.kubeconfig

kubectl config use-context tls-bootstrap-token-user@kubernetes  \
    --kubeconfig=bootstrap-kubelet.kubeconfig


## 分发配置文件admin.kubeconfig
if [[ ! -d ../roles/kube_apiserver/files ]];then
    mkdir -p ../roles/kube_apiserver/files
fi
cp admin.kubeconfig ../roles/kube_apiserver/files


## 分发配置文件controller-manager.kubeconfig
if [[ ! -d ../roles/kube_controller_manager/files ]];then
    mkdir -p ../roles/kube_controller_manager/files
fi
cp controller-manager.kubeconfig ../roles/kube_controller_manager/files


## 分发配置文件scheduler.kubeconfig
if [[ ! -d ../roles/kube_scheduler/files ]];then
    mkdir -p ../roles/kube_scheduler/files
fi
cp scheduler.kubeconfig ../roles/kube_scheduler/files


## 分发配置文件bootstrap-kubelet.kubeconfig
if [[ ! -d ../roles/kubelet/files ]];then
    mkdir -p ../roles/kubelet/files
fi
cp bootstrap-kubelet.kubeconfig ../roles/kubelet/files


## 分发配置文件kube-proxy.kubeconfig
if [[ ! -d ../roles/kube_proxy/files ]];then
    mkdir -p ../roles/kube_proxy/files
fi
cp kube-proxy.kubeconfig ../roles/kube_proxy/files


## boostrap.secret.yaml文件
if [[ ! -d ../others ]];then
    mkdir -p ../others
fi
cp bootstrap.secret.yaml ../others
